type Article {
  title: String!
  content: String!
  image: UploadFile
  published_at: Date!
  category: Category
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input ArticleInput {
  title: String!
  content: String!
  image: ID
  published_at: Date!
  category: ID
}

type Category {
  name: String!
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input CategoryInput {
  name: String!
  articles: [ID]
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createFacilityInput {
  data: FacilityInput
}

type createFacilityPayload {
  facility: Facility
}

input createInstitutionInput {
  data: InstitutionInput
}

type createInstitutionPayload {
  institution: Institution
}

input createInstitutionTypeInput {
  data: InstitutionTypeInput
}

type createInstitutionTypePayload {
  institutionType: InstitutionType
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteFacilityInput {
  where: InputID
}

type deleteFacilityPayload {
  facility: Facility
}

input deleteInstitutionInput {
  where: InputID
}

type deleteInstitutionPayload {
  institution: Institution
}

input deleteInstitutionTypeInput {
  where: InputID
}

type deleteInstitutionTypePayload {
  institutionType: InstitutionType
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArticleInput {
  title: String
  content: String
  image: ID
  published_at: Date
  category: ID
}

input editCategoryInput {
  name: String
  articles: [ID]
}

input editFacilityInput {
  name: String
  abbreviation: String
  institutions: [ID]
  articles: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editInstitutionInput {
  name: String
  abbreviation: String
  articles: [ID]
  facilities: [ID]
  facility: ID
}

input editInstitutionTypeInput {
  name: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type Facility {
  name: String
  abbreviation: String
  institutions(sort: String, limit: Int, start: Int, where: JSON): [Institution]
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input FacilityInput {
  name: String
  abbreviation: String
  institutions: [ID]
  articles: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

type Institution {
  name: String
  abbreviation: String
  facility: Facility
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  facilities(sort: String, limit: Int, start: Int, where: JSON): [Facility]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input InstitutionInput {
  name: String
  abbreviation: String
  articles: [ID]
  facilities: [ID]
  facility: ID
}

type InstitutionType {
  name: String
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input InstitutionTypeInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | Article | createArticlePayload | updateArticlePayload | deleteArticlePayload | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Facility | createFacilityPayload | updateFacilityPayload | deleteFacilityPayload | InstitutionType | createInstitutionTypePayload | updateInstitutionTypePayload | deleteInstitutionTypePayload | Institution | createInstitutionPayload | updateInstitutionPayload | deleteInstitutionPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createFacility(input: createFacilityInput): createFacilityPayload
  updateFacility(input: updateFacilityInput): updateFacilityPayload
  deleteFacility(input: deleteFacilityInput): deleteFacilityPayload
  createInstitutionType(input: createInstitutionTypeInput): createInstitutionTypePayload
  updateInstitutionType(input: updateInstitutionTypeInput): updateInstitutionTypePayload
  deleteInstitutionType(input: deleteInstitutionTypeInput): deleteInstitutionTypePayload
  createInstitution(input: createInstitutionInput): createInstitutionPayload
  updateInstitution(input: updateInstitutionInput): updateInstitutionPayload
  deleteInstitution(input: deleteInstitutionInput): deleteInstitutionPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type Query {
  article(id: ID!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  facility(id: ID!): Facility
  facilities(sort: String, limit: Int, start: Int, where: JSON): [Facility]
  institutionType(id: ID!): InstitutionType
  institutionTypes(sort: String, limit: Int, start: Int, where: JSON): [InstitutionType]
  institution(id: ID!): Institution
  institutions(sort: String, limit: Int, start: Int, where: JSON): [Institution]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updateFacilityInput {
  where: InputID
  data: editFacilityInput
}

type updateFacilityPayload {
  facility: Facility
}

input updateInstitutionInput {
  where: InputID
  data: editInstitutionInput
}

type updateInstitutionPayload {
  institution: Institution
}

input updateInstitutionTypeInput {
  where: InputID
  data: editInstitutionTypeInput
}

type updateInstitutionTypePayload {
  institutionType: InstitutionType
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  id: ID!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}
